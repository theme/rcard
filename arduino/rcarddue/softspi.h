#ifndef SOFTSPI_H
#define SOFTSPI_H

#include <Arduino.h>

//  MISO (Master In Slave Out) - The Slave line for sending data to the master,
//  MOSI (Master Out Slave In) - The Master line for sending data to the peripherals,
//  SCK (Serial Clock) - The clock pulses which synchronize data transmission generated by the master 
//
//  and one line specific for every device:
//
//  SS (Slave Select) - the pin on each device that the master can use to enable and disable specific devices. 

class SPIpins {
    public:
        explicit SPIpins( int MOSI, int MISO, int SCK, int SS);
        explicit SPIpins(SPIpins& other);
    private:
        int MOSI_;
        int MISO_;
        int SCK_;
        int SS_;

        friend class SoftSPI;
};

class SoftSPISettings {
    public:
        explicit SoftSPISettings(uint32_t clock, uint32_t delay, uint8_t bitOrder, uint8_t dataMode);
        explicit SoftSPISettings(SoftSPISettings& other);
    private:
        void calcMode();
        uint32_t clock_;
        uint32_t delay_;
        uint8_t bitOrder_;
        uint8_t dataMode_;

        bool CPOL_;
        bool CPHA_;

        friend class SoftSPI;
};

class SoftSPI {
    public:
         SoftSPI(uint32_t cpu_feq, const SoftSPISettings& sets, const SPIpins& pins);
         void setup();    // init pinMode
         void beginTransfer();    // set clock divider
         uint8_t transfer(uint8_t data);
         void interruptTransferDelay();
         void delay(uint32_t clock);
         void endTransfer();      // clear clock divider
    private:
        static void inline wait(uint32_t cycle){
            while( cycle != 0 ){
                cycle--;
            }
        }
        const SPIpins& pins_;
        const SoftSPISettings& sets_;
        uint32_t cpu_feq_;
        uint32_t halfBitCycle_;
        
        uint32_t delayCycle_;
        uint32_t delayCounter_;
};

#endif

